local upd_time = 0
local opt = actor_effects_data.options
local time_disabled = 0
local outfit_id
local helm_id
local pack_id
local ini = system_ini()

function on_game_start()
	--RegisterScriptCallback("actor_on_info_callback",process_pda_infoportion)
	local function on_first_update()
		RegisterScriptCallback("actor_on_item_use",use_item_obj)
		RegisterScriptCallback("actor_on_update",update)
		RegisterScriptCallback("actor_item_to_slot",outfit_to_slot)
		RegisterScriptCallback("actor_item_to_ruck",outfit_remove)
		RegisterScriptCallback("actor_on_item_drop",outfit_remove)
		RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
		RegisterScriptCallback("actor_on_hit_callback",actor_on_hit)
		RegisterScriptCallback("actor_on_jump",on_jump)
		init()
	end
	--RegisterScriptCallback("on_key_press",on_key_press)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("actor_on_first_update",on_first_update)
end

function actor_on_before_death()
	UnregisterScriptCallback("actor_on_item_use",use_item_obj)
	UnregisterScriptCallback("actor_on_update",update)
	UnregisterScriptCallback("actor_item_to_slot",outfit_to_slot)
	UnregisterScriptCallback("actor_item_to_ruck",outfit_remove)
	UnregisterScriptCallback("actor_on_item_drop",outfit_remove)
end
local item_fx = actor_effects_data.item_fx
local item_in_use = {}

function init()
	local item = db.actor:item_in_slot(7)
	outfit_id = item and item:id()
	
	item = db.actor:item_in_slot(12)
	helm_id = item and item:id()
	
	item = db.actor:item_in_slot(13)
	pack_id = item and item:id()
end

function use_item_obj(item)
	if (item) then
		use_item(item:section())
	end
end

function use_item(name)
	if not db.actor:alive() then return end --death anim fix
	--if (axr_main.config:r_value("mm_options","enable_extra_animations",1,false) == false) then return end
	--printf("itemfx = %s",name)
	--this and use_item_update were redone by MAGILA
	local t = time_global()
	local name_if_radiated = string.gsub(name,"_radiated","")
	local name_decided = item_fx[name] and name or item_fx[name_if_radiated] and name_if_radiated
	if item_fx[name_decided] and (t > time_disabled) then
		local anim_time = item_fx[name_decided]
		if type (anim_time) == 'string' then
			anim_time = item_fx[anim_time]
		end
		if type (anim_time) ~= 'string' and anim_time['inheritance'] then
			local anim_time_bekup = item_fx[anim_time['inheritance']]
				
			for k, v in pairs(item_fx[anim_time['inheritance']]) do
				if anim_time[k] then
					anim_time_bekup[k] = anim_time[k]
				end
			end
			for k, v in pairs(anim_time) do
				if (not anim_time_bekup[k]) and type (k) == "number" then
					anim_time_bekup[k] = v
				end
			end
			anim_time = anim_time_bekup
		end
		local new_obj = {}
		for k, v in pairs(anim_time) do
			new_obj[t+k] = v
		end
		item_in_use[name_decided] = new_obj
	end
end

function use_item_update()
	local in_use = true

	for k, v in pairs(item_in_use) do
		for milli, action in pairs(v) do
			if time_global() >= milli then
				if type (action) == "function" then
					if action() then
						item_in_use[k] = nil
						return false
					end
				else
					assert(loadstring(action))()
				end
				item_in_use[k][milli] = nil
				-- db.actor:give_game_news(tostring(milli), action, "ui_iconsTotal_grouping", 0, 1000, 0)
			end
			in_use = not action
		end
	end
	if in_use then 
		item_in_use = {}
		return true
	 end
end

local seldom_upd_time
function update()
	local tg = time_global()
	if tg > upd_time then
		upd_time = tg+180
		actor_condition()
	end
	if tg > (seldom_upd_time or 100) then
		seldom_upd_time = tg+400
		bleedcondition(tg)
	end
	use_item_update()
end
------------------------------------------------------------------
function outfit_remove(obj)
	local id = obj:id()
	if has_alife_info("bar_arena_fight") then
		area_dinamic_hud.helmet_switch(false,true,false,'actor_effect outfit_remove')
		return
	end
	if id == outfit_id then
		use_item("outfit")
		outfit_id = nil
	elseif id == helm_id then
		use_item("helm")
		helm_id = nil
	elseif id == pack_id then
		use_item("backpack")
		pack_id = nil
	end
end

function outfit_to_slot(obj)
	local id = obj:id()
	
	local outfit = db.actor:item_in_slot(7)
	local _id = outfit and outfit:id()
	if id == _id then
		use_item("outfit")
		outfit_id = _id
		return
	end
	outfit = db.actor:item_in_slot(12)
	_id = outfit and outfit:id()
	if id == _id then
		use_item("helm")
		helm_id = _id
		return
	end
	outfit = db.actor:item_in_slot(13)
	_id = outfit and outfit:id()
	if id == _id then
		use_item("backpack")
		pack_id = _id
		return
	end
end

function actor_on_hit(actor, amount, direction, who, bone_index, hit_type)
	local ht = {
		[hit.fire_wound] = true,
		[hit.burn] = true,
		[hit.strike] = true
	}

	if ht[hit_type] then
		-- The character's reaction to damage on it
		if amount > 0.1 then
			level.add_pp_effector("amk_shoot.ppe",2011,false)
			level.set_pp_effector_factor(2011, amount)
			local cameffs
			local sounds
			if amount > 0.6 then
				level.add_pp_effector("total_recall.ppe",2016,false)
				level.set_pp_effector_factor(2016, amount)
				cameffs = {"head_shot","fusker"}
				sounds = {"pain_4","pain_1","hit_5","hit_6"}
			else
				cameffs = {"shell_shock","hit_front","hit_right","hit_back","hit_left","hit_front_left","hit_back_left","hit_front_right","hit_back_right"}
				sounds = {"pain_2","pain_3","pain_5","pain_6","pain_7","pain_8"}
			end
			level.add_cam_effector("camera_effects\\"..cameffs[math.random(#cameffs)]..".anm")
			area_sounds.actor_sound("actor\\"..sounds[math.random(#sounds)],2)
		end

		-- Start animation when actor gets hit in the arms and drop items
		if db.actor:has_info("anim_hands_status") then return end
		local power_fracture = 0.4
		local critical_damage = 0.5
		local item = actor:active_item()
		local item_section = item and item:section()
		if item_section then
			local condition = db.actor:cast_Actor():conditions()
			local la = (bone_index >= 21 and bone_index <= 33) and (condition:GetFracture(3) >= power_fracture or amount >= critical_damage)
			local ra = (bone_index >= 34 and bone_index <= 47) and (condition:GetFracture(4) >= power_fracture or amount >= critical_damage)
			local single = ini:r_float_ex(item:section(),"single_handed", false)
			if single and ra or ra or la then
				local condition = item:condition()
				condition = condition - 0.01

				if item_section:find("wpn_binoc") then
					if (condition >= 0.1) then
						item:set_condition(condition)
					else
						actor:move_to_ruck(item)
						SetHudMsg(game.translate_string("st_bino_defected"),4)
					end
				else
					item:set_condition(condition)
					actor:drop_item(item)
					StartAnimHands(false,false,false,{
						use = "hit",
						section = "anm_hit"
					})
				end
			end
		end
	end
end
-----------------------------------------------------------------------------

--Дозиметр, тихий режим.
local detector_quiet_mode = {}
function quiet_mode_action_functor(item)
	if detector_quiet_mode[item:id()] then
		detector_quiet_mode[item:id()] = false
	else
		detector_quiet_mode[item:id()] = true
	end
	use_item("detector_quiet_mode")
end

function quiet_mode_functor(item)
	if detector_quiet_mode[item:id()] then
		return game.translate_string("st_enable_sound")
	else
		return game.translate_string("st_disable_sound")
	end
end
-- local on_key_quiet_mode = 0 --закомментировано из за проблемы определения key_bindings.kDETECTOR
-- local time_key = 0.4 --время за которое необходимо успеть нажать 2 раза
-- function on_key_press(key)
-- 	if not db.actor:alive() then return end --death
-- 	if dik_to_bind(key) == key_bindings.kDETECTOR then -- исправить.
-- 		on_key_quiet_mode = on_key_quiet_mode + 1
-- 		if on_key_quiet_mode == 1 then
-- 			CreateTimeEvent("on_key_quiet_mode",0,time_key,function()
-- 				if on_key_quiet_mode >= 2 then
-- 					local item = db.actor:object("dosimeter")
-- 					quiet_mode_action_functor(item)
-- 				end
-- 				on_key_quiet_mode = 0
-- 				return true
-- 			end)
-- 		end
-- 	end
-- end

local actor_speed_time = 0
function actor_condition()
	local conditions = level.Actor():conditions()
	local SensorRad = conditions:GetSensorRad()*25*10
	local radiation = db.actor.radiation

	if radiation > 0 or SensorRad > 0 then
		if radiation < SensorRad then
			radiation = SensorRad
		end
		if math.random(100)<(radiation*100) then
			radiation = radiation>0.01 and math.random(100) > (radiation*100) and "click3" or math.random(6)
			-- No sounds without dosimeter detector by Surs
			local counter = db.actor:object("dosimeter")
			if counter then
				if (not counter:get_item_battery_dead() and not detector_quiet_mode[counter:id()]) then 
					local snd = sound_object("detectors\\geiger_"..radiation)
					snd:play(db.actor,0,sound_object.s2d)
				end
			end
		end
	end
	local get_move = db.actor:get_move_magnitude()*0.0008
	if get_move > 0 then
		actor_speed_time = actor_speed_time+get_move
	elseif actor_speed_time > 0 then
		actor_speed_time = actor_speed_time-(conditions:GetPower()*0.01)	
	end
	if actor_speed_time < 0 then actor_speed_time = 0 end
	actor_speed_time = math.min(32, actor_speed_time + db.actor.bleeding*opt.speed.k_bleed)
	area_sounds.breath(actor_speed_time, time_global(), nil, 0, false)
end

------------------------------------------------------------------------------
local isactcondset = false --статус маленький уровень хп или нет
local bleeding_effect = 0 -- таймер эффекта кровотичения
local radeffect = false --статус иффект
local ble1 = 0 
local ble2 = false 
local pain_effect = false
local pain_effect_2 = 0
local pain_effect_3 = 0
local pain_critical = 0.9 -- сильная боль
local pain_no_critical = 0.2 -- слабая боль
function bleedcondition(time)
	if not actor then actor = db.actor:cast_Actor():conditions() end
	local get_pain = actor:GetPain()
	--если боль сильная
	if get_pain > pain_critical and pain_effect == false then
		level.add_pp_effector("pain.ppe",200013,true)
		pain_effect = true
	elseif get_pain < pain_critical and pain_effect == true then
		level.remove_pp_effector(200013)
		pain_effect = false
	end
	--если боль слабая
	if get_pain > pain_no_critical and pain_effect_2 < time  then
		pain_effect_2 = time+math.random(4000,30000)
		level.add_pp_effector("pain_2.ppe", 200014, false)
		level.set_pp_effector_factor(200014, get_pain)
	end

	--если травма ног/головы/туловища
	local travm = actor:GetFracture(5) > 0.2 or actor:GetFracture(6) > 0.2 or actor:GetFracture(1) > 0.8 or actor:GetFracture(2) > 0.7
	if travm and db.actor:get_move_magnitude() > 30 and time > pain_effect_3 then
		pain_effect_3 = time + area_sounds.actor_sound("actor\\pain_"..math.random(1,8),3)*math.random(1,7)	
		if get_pain < pain_critical then actor:SetPain(get_pain + 0.02) end -- добавить боль если она не критическая
		actor:SetPower(actor:GetPower()/2) -- отнять стамину 
		level.add_pp_effector("pain_2.ppe", 200015, false)
		level.set_pp_effector_factor(200015, get_pain)	
	end
	--если маленький уровень хп
	if db.actor.health < 0.31 and isactcondset ~= true then
		level.add_pp_effector("alcohol.ppe",2012,true)
		isactcondset = true
	elseif db.actor.health > 0.30 and isactcondset ~= false then
		level.remove_pp_effector(2012)
		isactcondset = false
	end
	--если у нас кровотичение!
	if db.actor.bleeding > 0.01 and bleeding_effect < time then
		bleeding_effect = time+math.random(1000,6000)
		level.add_pp_effector("escape.ppe",2014, false)
		level.set_pp_effector_factor(2014, db.actor.bleeding)
	end 

	--если у нас радиация
	-- if db.actor.radiation > 0.3 and radeffect == false then 
	-- 	level.add_pp_effector("cherno.ppe",2013,true) 
	-- 	radeffect = true 
	-- elseif db.actor.radiation == 0 and radeffect == true then 
	-- 	level.remove_pp_effector(2013) 
	-- 	radeffect = false 
	-- end 
	
	if db.actor.bleeding > 0.4 and db.actor.power < 0.35 and ble2 == false then
		level.add_cam_effector("camera_effects\\pripyat_horror.anm",1001,false,"")
		level.add_pp_effector("snd_shock.ppe",2015,false)
		ble2 = true
	elseif db.actor.bleeding < 0.2 or db.actor.power > 0.7 and ble2 == true then
		level.remove_pp_effector(2015)
		ble2 = false
	end
end

--Feedback effect from item in hands while jumping and landing.
function on_jump(jump,time)
	if time > 0.5 or jump then
		local wpn = db.actor:active_item()
		
		if wpn and not TableAnimHands().AnmCheck(wpn) then
			local state = wpn:get_state()
			if state ~= 7 and state ~= 19 then
				local function stop()
					wpn:switch_state(0)
					level.Actor():BlockItemsInput(0)
				end
				level.Actor():BlockItemsInput(1)
				wpn:switch_state(21)
				local anm_jump = "anm_jump"
				if wpn:get_launcher_sect() ~= "" then
					anm_jump = "anm_jump_g"
				end
				local time = wpn:play_hud_motion(anm_jump, true, 21)/1000
				if time == 0 then
					stop()
				else
					CreateTimeEvent("play_hud_motion",2,time, function()
						stop()
						return true
					end)
				end
			end
		end
	end
end

function save_state(m_data)
	m_data.detector_quiet_mode = detector_quiet_mode
end
function load_state(m_data)
	detector_quiet_mode = m_data.detector_quiet_mode or {}
end