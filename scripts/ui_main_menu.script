-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Last edit:	10.01.2015
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9

local SKIP_FACTION_SELECTION = false -- TRUE to disable faction selection menu and start normally

class "main_menu" (CUIScriptWnd)
function main_menu:__init() super()
	math.randomseed(os.time())
	math.random()
	self.mbox_mode = 0
    self:InitControls()
    self:InitCallBacks()
	self.tick_counter = 0
	SendScriptCallback("main_menu_on_init",self)
	if not (level.present()) then
		xrs_debug_tools.on_game_start()
	end
	if (axr_main.config:r_value("temp","new_game_check",1) == nil) then
		axr_main.config:w_value("temp","new_game_check",false)
		axr_main.config:save()
	end
end

function main_menu:__finalize()
end

function main_menu:Update()

	CUIScriptWnd.Update(self)
	
	if not self:IsShown() then
		return
	end
	
	self.tick_counter = self.tick_counter + 1
	if self.tick_counter > 628318 then self.tick_counter = 0 end
	
	self._ver_shadow:SetWndPos(vector2():set(9 + 4*math.cos(GetCursorPosition().x/100) - 2, 745 + 4*math.cos(GetCursorPosition().y/100) - 2))
	
	if (self.mm_offset > 0 and not self.is_quit) then
		self.shniaga:SetWndPos(vector2():set(self.shniaga:GetWndPos().x, self.shniaga:GetWndPos().y - 5))
		self.mm_offset = self.mm_offset - 5
	elseif (self.mm_offset < 1000 and self.is_quit) then
		self.shniaga:SetWndPos(vector2():set(self.shniaga:GetWndPos().x, self.shniaga:GetWndPos().y + 5))
		self.mm_offset = self.mm_offset + 5
	end
	
	if self.is_quit and self.mm_offset > 995 then
		self.is_quit = false
		if self.anim_end_function == "options" then
			if self.opt_dlg == nil then
				self.opt_dlg = ui_mm_opt_main.options_dialog()
				self.opt_dlg.owner = self
			end
			
			self.opt_dlg:SetCurrentValues()
			self.opt_dlg:ShowDialog(true)
			self:HideDialog()
			self:Show(false)
		elseif self.anim_end_function == "credits" then
			game.start_tutorial("credits_seq")
		elseif self.anim_end_function == "quit" then
			self.message_box:InitMessageBox("message_box_quit_windows")
			self.message_box:ShowDialog(true)
		elseif self.anim_end_function == "disconnect" then
			self.message_box:InitMessageBox("message_box_quit_game")

			if (level.game_id() ~= 1) then
				self.message_box:SetText("ui_mm_disconnect_message")	-- MultiPlayer
			else
				self.message_box:SetText("ui_mm_quit_game_message")		-- SinglePlayer
			end
			self.message_box:ShowDialog(true)
		elseif self.anim_end_function == "start_game" then
			self:ShowFactionUI()
		elseif self.anim_end_function == "load_spawn" then
			if self.spawn_dlg == nil then
				self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
				self.spawn_dlg.owner = self
			end
		
			self.spawn_dlg:ShowDialog(true)
			self:HideDialog()
			self:Show(false)
		elseif self.anim_end_function == "save_clicked" then
			-- Prevent saving during —Åombat
			if (level.present()) then
				-- Prevent saving during an emission or psi-storm.
				if (xr_conditions.surge_started() or psi_storm_manager.is_started()) then
					SetHudMsg(game.translate_string("st_cannot_save_during_emmission"),4)
					get_console():execute("main_menu off")
					return
				end
			end
		
			if self.save_dlg == nil then
				self.save_dlg = ui_save_dialog.save_dialog()
				self.save_dlg.owner = self
			end
		
			self.save_dlg:FillList()
			self.save_dlg:SetAlphaToZero()
			self.save_dlg.is_quit = false
			self.save_dlg:ShowDialog(true)
			self:HideDialog()
			self:Show(false)
		elseif self.anim_end_function == "atmosfear_options" then
			if self.af_opt_dlg == nil then
				self.af_opt_dlg = atmosfear_options.af_options_dialog()
				self.af_opt_dlg.owner = self
			end
			
			self.af_opt_dlg:SetAlphaToZero()
			self.af_opt_dlg:SetCurrentValues()
			self.af_opt_dlg:ShowDialog(true)
			self:HideDialog()
			self:Show(false)
		elseif self.anim_end_function == "load_clicked" then
			if self.load_dlg ==nil then
				self.load_dlg = ui_load_dialog.load_dialog()
				self.load_dlg.owner = self
			end
		
			self.load_dlg:FillList()
			self.load_dlg:SetAlphaToZero()
			self.load_dlg.is_quit = false
			self.load_dlg:ShowDialog(true)
			self:HideDialog()
			self:Show(false)
		end
		
		self.anim_end_function = "none"
		
		return
	end
	
	self.hint_wnd:Show(false)

	self._ver:TextControl():SetTextColor(GetARGB(160,255,(1 + math.sin(self.tick_counter/100))*255/2,35))
	if self._ver:IsCursorOverWindow() then
		self:SetHint("st_mm_version_description")
	end
	
	-- Warning messages timer 
	if (self.msg_wnd_timer) then 
		self.msg_wnd_timer = self.msg_wnd_timer - 1
		if (self.msg_wnd_timer <= 0) then
			self.msg_wnd_timer = nil
			self.msg_wnd:Show(false)
		end
	end
end

function main_menu:InitControls()
	self:SetWndRect					(Frect():set(0,0,1024,768))

    local xml						= CScriptXmlInit()
    xml:ParseFile					("ui_mm_main.xml")

    xml:InitStatic					("background", self)
    self.shniaga					= xml:InitMMShniaga("frame_wnd",self);

	self.message_box				= CUIMessageBoxEx()
	self:Register					(self.message_box, "msg_box")
	
	self.anim_end_function = "none"
	
	local mm						= _G.main_menu.get_main_menu()
		
	self._ver_shadow = xml:InitStatic		("static_version",self)
	self._ver_shadow:TextControl():SetTextColor(GetARGB(122,0,0,0))
	self._ver_shadow:TextControl():SetText		("A.R.E.A. v. " .. (_G.GAME_VERSION))
	self._ver_shadow:AdjustHeightToText()
	self._ver_shadow:AdjustWidthToText()

	self._ver = xml:InitStatic		("static_version",self)
	self._ver:TextControl():SetTextColor (GetARGB(190, 210, 210, 210))
	self._ver:TextControl():SetText		("A.R.E.A. v. " .. (_G.GAME_VERSION))
	self._ver:AdjustHeightToText()
	self._ver:AdjustWidthToText()
 
	-- Message Window 
	self.msg_wnd = xml:InitFrame("msg_wnd:background",self)
	self.msg_wnd:SetAutoDelete(false)
	self.msg_wnd_text = xml:InitTextWnd("msg_wnd:text",self.msg_wnd)
	self.msg_wnd_text:SetTextAlignment(2)
	
	self.msg_wnd:Show(false)
	self.msg_wnd:SetColor(GetARGB(255,0,0,0))
	
	self.hint_wnd = xml:InitFrame("hint_wnd:background",self)
	self.hint_wnd:SetAutoDelete(false)
	self.hint_wnd_text = xml:InitTextWnd("hint_wnd:text",self.hint_wnd)
	self.hint_wnd:Show(false)
	
	self.shniaga:SetWndPos(vector2():set(self.shniaga:GetWndPos().x, self.shniaga:GetWndPos().y + 1000))
	self.mm_offset = 1000
	self.is_quit = false
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end


function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)
	self:AddCallback("btn_spawn",		ui_events.BUTTON_CLICKED,				self.OnButton_load_spawn,			self)
	-- options
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
    -- AtmosFear options
	self:AddCallback("btn_af_options",  ui_events.BUTTON_CLICKED,				self.OnButton_af_options_clicked,	self)
	-- end AtmosFear options
	-- load
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)

	-- quit
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)

	self:Register(self, "self")
	self:AddCallback("self",	ui_events.MAIN_MENU_RELOADED, self.OnMenuReloaded, self)
end
function main_menu:OnMsgOk()
	if (self.mbox_mode == 2) then
		local console = get_console()
		console:execute("quit")
	end
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()

	if 	self.mbox_mode == 1 then
		self:LoadLastSave()
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	local					console = get_console()
	console:execute			("main_menu off")
	console:execute			("load_last_save")
end

function main_menu:OnButton_last_save()
	if (alife() == nil) then
		local flist = getFS():file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*"..".scop")
		if flist:Size() < 1 then
			return
		end
		
		flist:Sort(FS.FS_sort_by_modif_down)
		local file = flist:GetAt(0)
		if not (file) then 
			return
		end
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(".scop")))
	
		local console = get_console()
		console:execute("main_menu off")
		console:execute("start server("..file_name.."/single/alife/load) client(localhost)")
		return
	end

	if ((db.actor ~= nil) and (db.actor:alive() == false)) then
		self:LoadLastSave()
		return
	end
	
	self.mbox_mode = 1
	self.message_box:InitMessageBox ("message_box_confirm_load_save")
	self.message_box:ShowDialog(true)
end

function main_menu:OnButton_credits_clicked()
	self.is_quit = true
	self.anim_end_function = "credits"
end

function main_menu:OnButton_quit_clicked()
	self.is_quit = true
	self.anim_end_function = "quit"
end

function main_menu:OnButton_disconnect_clicked()
	self.is_quit = true
	self.anim_end_function = "disconnect"
end

function main_menu:OnMessageQuitGame()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_return_game()
	printf("collectgarbage before=%sKb",collectgarbage("count"))
	collectgarbage("collect")
	collectgarbage("collect")
	printf("collectgarbage after=%sKb",collectgarbage("count"))
	
	local console = get_console()
	console:execute("main_menu off")
	SendScriptCallback("main_menu_on_quit",self)
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_novice")
	self.is_quit = true
	self.anim_end_function = "start_game"
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self.is_quit = true
	self.anim_end_function = "start_game"
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_veteran")
	self.is_quit = true
	self.anim_end_function = "start_game"
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")
	self.is_quit = true
	self.anim_end_function = "start_game"
end

local faction_ui
function main_menu:ShowFactionUI()
	if (SKIP_FACTION_SELECTION) then 
		self:StartGame() 
		return 
	end
	if not (faction_ui) then
		faction_ui = ui_mm_faction_select and ui_mm_faction_select.faction_ui(self)
	end

	if (faction_ui) then
		faction_ui:ShowDialog(true)
		self:HideDialog()
		self:Show(false)
	end
end 

function main_menu:StartGame()
	local console = get_console()

	if (alife() ~= nil) then
		console:execute	("disconnect")
	end
	device():pause(false)
	console:execute("start server(all/single/alife/new) client(localhost)")
	console:execute("main_menu off")
end

function main_menu:OnButton_load_spawn()
	self.is_quit = true
	self.anim_end_function = "load_spawn"
end

function main_menu:OnButton_save_clicked()
	self.is_quit = true
	self.anim_end_function = "save_clicked"
end

function main_menu:OnButton_options_clicked()
	self.is_quit = true
	self.anim_end_function = "options"
end

-- AtmosFear options dialog
function main_menu:OnButton_af_options_clicked()
	self.is_quit = true
	self.anim_end_function = "atmosfear_options"
end
-- End AtmosFear options dialog
function main_menu:OnButton_load_clicked()
	self.is_quit = true
	self.anim_end_function = "load_clicked"
end

function main_menu:Dispatch(cmd, param)  --virtual function
	if cmd == 2 then
		self:OnButton_multiplayer_clicked()
	end
	return true
end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
	local console = get_console()

	SendScriptCallback("main_menu_on_keyboard",dik,keyboard_action,self,level.present())

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if (level.present()) then 
			if (dik == DIK_keys.DIK_ESCAPE) then
				if (db.actor and db.actor:alive()) or (IsGameTypeSingle() ~= true) then
					self.OnButton_return_game()
				end
				return true
			elseif (bind == key_bindings.kQUICK_SAVE) then
				if not (db.actor and db.actor:alive()) then return false end
				level_input.action_quick_save()
				return true
			elseif (bind == key_bindings.kQUICK_LOAD) then 
				if not (db.actor and db.actor:alive()) then return false end
				level_input.action_quick_load()
				return true
			end
		end

		if (dik == DIK_keys.DIK_Q) then
			self:OnMessageQuitWin()
		elseif (dik == DIK_keys.DIK_NUMPAD0) then
			if (reload_system_ini) then
				reload_system_ini()
				printf("system_ini_reload = success!")
			end
		end
		if dik == DIK_keys.DIK_F1 then
			self:show_position_informer_window()
		end
	end

	return true
end

function main_menu:OnMenuReloaded()
	self:OnButton_options_clicked()
	if self.opt_dlg then
		self.opt_dlg:OnMenuReloaded()
	end
end

function main_menu:SetMsg(text,tmr)
	if (text == "") then 
		return 
	end
	self.msg_wnd:Show(true)
	self.msg_wnd_text:SetText(text)
	self.msg_wnd_text:AdjustHeightToText()
	self.msg_wnd_text:SetWndSize(vector2():set(1024,self.msg_wnd_text:GetHeight()+10))
	self.msg_wnd_text:SetWndPos(vector2():set(0,20))
	
	self.msg_wnd:SetWndSize(vector2():set(1024,self.msg_wnd_text:GetHeight()+44))
	self.msg_wnd:SetWndPos(vector2():set(0,80))

	self.msg_wnd_timer = 100*tmr
end

function main_menu:show_position_informer_window()
	if self.cheat_dlg == nil then

		self.cheat_dlg = ui_ami_position.pos_inf_ami()
		self.cheat_dlg.owner = self
	end
	self.cheat_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(true)
end
 
function main_menu:SetHint(text,pos)
	if (text == "") then
		return
	end
	
	local str = game.translate_string(text)
	
	self.hint_wnd:Show(true)
	self.hint_wnd_text:SetText(str)
	self.hint_wnd_text:AdjustHeightToText()
	self.hint_wnd:SetWndSize(vector2():set(self.hint_wnd:GetWidth(),self.hint_wnd_text:GetHeight()+44))
	
	pos = pos or GetCursorPosition()
	pos.y = pos.y - self.hint_wnd:GetHeight()
	pos.x = pos.x - self.hint_wnd:GetWidth()
	self.hint_wnd:SetWndPos(pos)
	
	FitInRect(self.hint_wnd,Frect():set(0,0,1024,768),0,100)
	
	if (self[text .. "_dem"]) then
		self[text .. "_dem"]:Show(true)
		--self[text .. "_dem"]:SetTextureColor(GetARGB(self.dem_alpha,255,255,255))
	end
end