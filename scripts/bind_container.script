containers = {}
se_inv_box_containers = {}
curBoxID = nil

local sys_ini = system_ini()
local temp_count = 0 -- Hack to fix ctrl+dbl-click exploit. Happens too fast before items are registered to parent, get_item_count will be inaccurate

local h_temp = 0.0
local b_temp = 0.0
local p_temp = 0.0
local s_temp = 0.0

function bind(obj)
    obj:bind_object(container_binder(obj))
end

local function inventory_box_can_take(obj,itm,flags)
	--printf("%s item=%s curBoxID=%s inv_box=%s",obj:name(),itm:name(),curBoxID,containers[curBoxID] and containers[curBoxID].id)
	if not (curBoxID and containers[curBoxID] and containers[curBoxID].id == obj:id()) then 
		return 
	end
	
	-- can't take item that represents self!
	if (curBoxID == itm:id()) then 
		flags.ret_value = false 
		return
	end

	local se_obj = alife_object(obj:id())
	if not (se_obj) then 
		return
	end 

	-- limit items summary volume
--	if (obj:box_volume() + itm:volume() + temp_count >= obj:get_box_max_volume() + obj:get_box_base_volume()) then
--		flags.ret_value = false
--		return
--	end
	
	temp_count = temp_count + itm:volume()
	-- allow only certain sections or clsid
	local cls = itm:clsid()
	local sec = itm:section()
	local ret
	if ( #se_obj.allow_take_items > 0 ) then
		for i,v in ipairs(se_obj.allow_take_items) do 
			if ( ( sec == v ) or ( clsid[v] and clsid[v] == cls ) ) then 
				return 
			end
		end
		flags.ret_value = false
	elseif ( #se_obj.refuse_take_items > 0 ) then
		for i,v in ipairs(se_obj.refuse_take_items) do 
			if ( ( sec == v ) or ( clsid[v] and clsid[v] == cls ))  then 
				flags.ret_value = false
				return
			end
		end
	end
end 

local function on_item_use(itm)
	if (sys_ini:r_string_ex(itm:section(),"script_binding") == "bind_container.bind") then
		access_inventory(itm)
	end
end 

local function save_state(m_data)
	m_data.se_inv_box_containers = se_inv_box_containers
end 

local function load_state(m_data)
	se_inv_box_containers = m_data.se_inv_box_containers or se_inv_box_containers
	m_data.se_inv_box_containers = nil
end

function on_game_start()
	RegisterScriptCallback("inventory_box_can_take",inventory_box_can_take)
	--RegisterScriptCallback("actor_on_item_use", on_item_use)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end
-----------------------------
function calculate_weight(inv_box)
	local total_weight = inv_box:box_weight()
	local function add_items(inv_box, item)
		if (containers[item:id()] and containers[item:id()].id) then
			total_weight = total_weight + calculate_weight(item)
		end
	end
	--inv_box:iterate_inventory_box(add_items, inv_box)

	return total_weight
end

function calculate_volume(inv_box)
	local total_volume = inv_box:box_volume()
	local function add_items(inv_box, item)
		if (containers[item:id()] and containers[item:id()].id) then
			total_volume = total_volume + calculate_volume(item)
		end
	end
	--inv_box:iterate_inventory_box(add_items, inv_box)

	return total_volume
end

function use_container(id,pid)
	local box = id and level.object_by_id(id)
	if (box) then
		--level.map_add_object_spot(id, "ui_pda2_actor_box_location", "st_ui_pda_actor_box") -- debug
		get_hud():HideActorMenu()
		curBoxID = pid
		box:use(db.actor)
		return true -- destroy timed event
	end 
	return false -- repeat timed event
end 

local force_close = false
function can_access_inventory(obj)
	if (curBoxID == obj:id() and ActorMenu.get_menu_mode() == 4) then
		force_close = true
		return game.translate_string("st_close")
	end
	return game.translate_string("st_open")
end 

-- called from item section in items.ltx
function access_inventory(obj)
	if not obj then
		printf("access_inventory obj is nil")
	end
	if not obj:parent() then
		printf("access_inventory obj parent is nil")
	end
	if not obj:parent():id() then
		printf("access_inventory obj parent id is nil")
	end
	if obj:parent():id() ~= 0 then 
		printf("actor is not owner of this backpack, id: %s", obj:id())
		return 
	end
	if (force_close and ActorMenu.get_menu_mode() == 4) then
		sound_object("interface\\inv_drop_bag"):play(db.actor,0,sound_object.s2d)
		force_close = false
		curBoxID = nil
		ActorMenu.get_actor_menu():SetMenuMode(1)
		printf("container menu mode is 4")
		return
	end
	local id = obj:id()
	curBoxID = id
	local se_inv_box = containers[id] and containers[id].id and alife_object(containers[id].id)
	if not (se_inv_box) then
		-- create inventory_box_s under map
		local pack = obj:section():match("(backpack_[%w_]*)") or obj:section():match("([%w_]*container)")
		printf("backpack box name:%s", pack)
		if pack then
			se_inv_box = alife():create("no_"..pack,db.actor:position(),level.vertex_id(db.actor:position()),db.actor:game_vertex_id())
			se_inv_box_containers[se_inv_box.id] = id
		end
	end
	if (se_inv_box) then
		-- force strictly online
		alife():set_switch_online(se_inv_box.id,true)
		alife():set_switch_offline(se_inv_box.id,false)
		
		containers[id] = containers[id] or {}
		containers[id].id = se_inv_box.id
		
		se_inv_box.allow_take_items = alun_utils.parse_list(sys_ini,obj:section(),"allow_take_list") -- can be list of sections or clsids
		se_inv_box.refuse_take_items = alun_utils.parse_list( sys_ini, obj:section(), "refuse_take_list" )
		
		-- Object will come online next update so wait
		CreateTimeEvent(id,"container",0,use_container,se_inv_box.id,id)
	end
end
--------------------------------------------------------------------------------
-- Class "container_binder"
--------------------------------------------------------------------------------
class "container_binder" (object_binder)
-- Class constructor
function container_binder:__init(obj) super(obj)

end
-- Class update
function container_binder:update(delta)
    object_binder.update(self, delta)
	self.section = self.object:section()
	self.size = sys_ini:r_float_ex(self.section, "inv_volume")
	if self.first_call == true then
		self.first_call = false
		
		local id = self.object:id()
		local se_obj = alife_object(id)
		if (se_obj) then
			local m_data = alife_storage_manager.get_se_obj_state(se_obj)
			if (m_data and m_data.container_id) then
				containers[se_obj.id] = { id = m_data.container_id }
				se_inv_box_containers[m_data.container_id] = se_obj.id
			end
		end
		
		if (containers[id]) then
			-- release inv_box not linked to an object
			for inv_box_id,item_id in pairs(se_inv_box_containers) do
				if (id == false) then 
					local se_obj = alife():object(inv_box_id)
					if (se_obj and IsInvbox(nil,se_obj:clsid())) then
						alife():release(se_obj)
					end
					se_inv_box_containers[inv_box_id] = nil
				end
			end
		
			local se_inv_box = containers[id].id and alife_object(containers[id].id)
			if (se_inv_box and IsInvbox(nil,se_inv_box:clsid())) then
				se_inv_box.allow_take_items = alun_utils.parse_list(sys_ini,self.section,"allow_take_list") -- can be list of sections or clsids
				se_inv_box.refuse_take_items = alun_utils.parse_list(sys_ini, self.section,"refuse_take_list")
				--level.map_add_object_spot(se_inv_box.id, "ui_pda2_actor_box_location", "st_ui_pda_actor_box") -- debug
				alife():set_switch_online(se_inv_box.id,true)
				alife():set_switch_offline(se_inv_box.id,false)
				local inv_box = level.object_by_id(se_inv_box.id)
				if inv_box then
					self.weight = calculate_weight(inv_box)
					self.object:set_weight(self.weight)
					self.volume = calculate_volume(inv_box)
					self.object:set_volume(self.volume)
				end
			else
				if (containers[id].id and se_inv_box_containers[containers[id].id]) then 
					se_inv_box_containers[containers[id].id] = false
				end
				containers[id] = nil
			end
		end
	end
	
	-- If actor menu is in dead body search mode then check if it's our ID; if so calculate_weight
	if (ActorMenu.get_menu_mode() == 4 and curBoxID == self.object:id()) then
		temp_count = 0
		local se_inv_box = containers[curBoxID] and containers[curBoxID].id and alife_object(containers[curBoxID].id)
		if (se_inv_box) then
			local inv_box = level.object_by_id(se_inv_box.id)
			if inv_box then
				self.weight = calculate_weight(inv_box)
				--printf("actor weight:%s",db.actor:get_total_weight())
				self.object:set_weight(self.weight)
				self.maxsize = inv_box:get_box_max_volume()
				self.volume = calculate_volume(inv_box)
				self.object:set_volume(self.volume)
				--get_hud():UpdateActorMenu()
				--printf("box weight:%s volume:%s objectsect:%s", self.weight,self.volume,self.object:section())
				--printf("actor weight2:%s actor volume2:%s",db.actor:get_total_weight(),db.actor:get_total_volume())
			end
			
			--if string.find(self.object:section(), "artefact_container_belt") then 
			--	
			--	local se_obj = alife_object(self.object:id())
			--	
			--	h_temp = 0.0
			--	b_temp = 0.0
			--	p_temp = 0.0
			--    s_temp = 0.0
			--	
			--	local function modify(inv_box,item)
			--	
			--		local section = item:section()
			--		local h_res = sys_ini:r_float_ex(section, "health_restore_speed", 0.0) or 0.0
			--		local b_res = sys_ini:r_float_ex(section, "bleeding_restore_speed", 0.0) or 0.0
			--		local p_res = sys_ini:r_float_ex(section, "power_restore_speed", 0.0) or 0.0
			--		local s_res = sys_ini:r_float_ex(section, "satiety_restore_speed", 0.0) or 0.0
			--		
			--		printf("Inv box sec: %s, vars %s, %s, %s, %s", section, h_res, b_res, p_res, s_res)
			--		
			--		h_temp = h_temp + h_res
			--		b_temp = b_temp + b_res
			--		p_temp = p_temp + p_res
			--		s_temp = s_temp + s_res
			--		
			--	end
			--	
			--	inv_box:iterate_inventory_box(modify)
			--	
			--	se_obj.m_fHealthRestoreSpeed = h_temp
			--	se_obj.m_fBleedingRestoreSpeed = b_temp
			--	se_obj.m_fPowerRestoreSpeed = p_temp
			--	se_obj.m_fSatietyRestoreSpeed = s_temp
			--
			--	printf("Inv box delta: %s, %s, %s, %s", h_temp, b_temp, p_temp, s_temp)
			--	printf("Inv box new params: %s, %s, %s, %s", se_obj.m_fHealthRestoreSpeed, se_obj.m_fBleedingRestoreSpeed, se_obj.m_fPowerRestoreSpeed, se_obj.m_fSatietyRestoreSpeed)
			--
			--end
		end

		if self.object:clsid() == clsid.equ_backpack then
			if self.maxsize and self.volume then
				self.object:set_condition((self.volume-self.size)/(self.maxsize))
				ActorMenu.get_actor_menu():UpdateConditionProgressBars()
			end
		end
	end

end

-- Reload object
function container_binder:reload(section)
    object_binder.reload(self, section)
end
-- Reinitialize object
function container_binder:reinit()
    object_binder.reinit(self)
end
-- Net spawn
function container_binder:net_spawn(se_abstract)
    if not(object_binder.net_spawn(self, se_abstract)) then
        return false
    end
	
	self.first_call = true
	
    return true
end
-- Net destroy
function container_binder:net_destroy()
	object_binder.net_destroy(self)
	printf("net_destroy box:%s[%s]", self.object:section(), self.object:id())
	local se_obj = alife_object(self.object:id())
	local se_obj_box = se_obj and bind_container.containers[se_obj.id] and bind_container.containers[se_obj.id].id and alife_object(bind_container.containers[se_obj.id].id)
	if (se_obj_box) then
		alife():set_switch_online(se_obj_box.id,false)
		alife():set_switch_offline(se_obj_box.id,true)
	end
end
-- Standart function for save
function container_binder:net_save_relevant()
	return true
end
-- Saving container
function container_binder:save(stpk)
	object_binder.save(self, stpk)
	local se_obj = alife_object(self.object:id())
	if (se_obj) then
		local m_data = alife_storage_manager.get_se_obj_state(se_obj,true)
		if (m_data and bind_container.containers[se_obj.id]) then 
			m_data.container_id = bind_container.containers[se_obj.id].id
		end
	end
end
-- Loading container
function container_binder:load(stpk)
	object_binder.load(self, stpk)
end