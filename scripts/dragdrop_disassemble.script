--[[
Drag and drop disassemble script
By Alundaio, who was pestered by Axebeard who doesn't know how to script
--]]
function on_game_start()
    RegisterScriptCallback("CUIActorMenu_OnItemDropped",OnItemDropped)
end
 
function OnItemDropped(itm_from,itm_to,slot_from,slot_to)
    --printf("from=%s to=%s slot_from=%s slot_to=%s  (%s)",itm_from:name(),itm_to:name(),slot_from,slot_to,EDDListType.iActorBag)
    -- only work if draggin item in actor's bag to another item in actor's bag
    if not (slot_from == EDDListType.iActorBag and slot_to == EDDListType.iActorBag) then
        return
    end
	
    local itm_dis
    local itm_craft_tool
    local sys_ini = system_ini()
   
    if (sys_ini:r_bool_ex(itm_from:section(),"can_disassemble",false) == true) then
        itm_craft_tool = itm_from
        itm_dis = itm_to
    elseif (sys_ini:r_bool_ex(itm_to:section(),"can_disassemble",false) == true) then
        itm_craft_tool = itm_to
        itm_dis = itm_from
    end
   
    if not (itm_craft_tool) then
        return -- item being dragged from or to is not craftitem
    end
   
    local craft_tool_sec = itm_craft_tool:section()
    local disassemble_categories = sys_ini:r_string_ex(craft_tool_sec,"disassemble_categories","")
    if (disassemble_categories == "") then
        return
    end
   
    disassemble_categories = alun_utils.str_explode(disassemble_categories,",")
    if (#disassemble_categories <= 0) then
        return
    end
   
    local itm_dis_sec = itm_dis:section()
    local cond = itm_dis:condition()
   
    for _,dis_sec in ipairs(disassemble_categories) do
        local result, sec, value = nil, nil, nil
        local line_count = sys_ini:line_count(dis_sec)-1
        for i=0,line_count do
            result, sec, value = sys_ini:r_line(dis_sec,i,"","")
            if (sec and sec ~= "" and sec ~= "random_parts" and sys_ini:section_exist(sec)) then  
                if (sec == itm_dis_sec) then
                    --gives player Spare Parts item
                    local random_parts = sys_ini:r_string_ex(dis_sec,"random_parts","spareparts")
                    if (random_parts ~= "") then
						
						local save_chance = math.random(4,10)
						local break_chance = math.random(1,21)
						local tools_condition = itm_craft_tool:condition()
						local break_coeff = area_skills.skills_table.uncraft_skill/10
						
						if (save_chance+break_coeff) < break_chance then
							tools_condition = tools_condition - 0.10
							itm_craft_tool:set_condition(tools_condition)
							if tools_condition <= 0 then
								alife():release(alife_object(itm_craft_tool:id()),true)
							else
								itm_craft_tool:set_condition(tools_condition)
                            end
						end
                       
                        random_parts = alun_utils.str_explode(random_parts,",")
                        if (#random_parts == 0) then
                            table.insert(random_parts,"spareparts")
                        end
						
						local uncraft_chance = (50+(50*(area_skills.skills_table.uncraft_skill/area_skills.max_skills_level)))
						local coeff = uncraft_chance/100
                       
                        local amt = 1
						local hudmsg = ""
						if uncraft_chance > math.random(1,11) then
							if (cond >= 0.9) then
								amt = utils.round((#random_parts)*coeff)
							elseif (cond >= 0.6) then
								amt = utils.round((((#random_parts)*coeff) - (math.random(0,1))))
							elseif (cond >= 0.3) then
								amt = utils.round(((((#random_parts)*coeff)/2) - (math.random(0,2))))
							else 
								amt = 1
							end
						else
							amt = 1
						end
						
						if (amt >= 2) then
							local function set_hud_msg(amt)
								local msg = amt==0 and "nothing" or amt==1 and "skill_up_one" or "skill_up_many"
								SetHudMsg(strformat(game.translate_string("st_uncraft_"..msg),amt),3)
								if amt > 0 and area_skills.skills_table.uncraft_skill < area_skills.max_skills_level then
									area_skills.raise_skill("uncraft_skill",0.25)
								end
								return true
							end
						
							CreateTimeEvent("create_parts","create_parts_timer",10,set_hud_msg,amt)	

						else
							local function set_hud_msg(amt)
								--SetHudMsg(game.translate_string("st_uncraft_nothing"),3)
								return true
							end
							CreateTimeEvent("create_parts","create_parts_timer",10,set_hud_msg,amt)
						end
						
						if amt > #random_parts then amt = #random_parts end
                        while amt > 0 do
							if #random_parts == 0 then
								abort("OH FUG NEEDS MORE UNIQUE PARTS")
							end
							local partSec = table.remove(random_parts, math.random(#random_parts))
							alife():create(partSec, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
							amt = amt - 1
						end
                       
                        local se_obj = alife():object(itm_dis:id())
                        if (se_obj) and IsOutfit(se_obj) or IsHeadgear(se_obj) then
                            alife():release(se_obj)
							actor_effects.use_item("dismantling_outfit")
						else
                            alife():release(se_obj)
							actor_effects.use_item("dismantling_weapon")
                        end
						
						--level.change_game_time(0,0,10) ;(days, hours, minutes)
                        return
                    end
                end
            end
        end
    end
end
 
--[[ EXAMPLE
 
[itm_hammer]
can_disassemble = true
disassemble_categories = dis_cat_1, dis_cat_2
 
[dis_cat_1]
wpn_pm
wpn_ak74
random_parts = spareparts, junk, junk2
 
[dis_cat_2]
wpn_knife
wpn_binoc
random_parts = spareparts, junk, junk2
--]]