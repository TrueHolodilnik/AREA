class "opt_controls" (CUIWindow)

function opt_controls:__init() super()
end

function opt_controls:__finalize()

end

function opt_controls:InitControls(x, y, xml, handler)

	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(738,416))

	self:SetAutoDelete(true)

--	self.bk = xml:InitFrame("frame", self)

	self.anim_alpha = 0
	self.is_quit = false
	
	self.elements_alpha = {}
	self.elements_alpha_color = {}
	self.elements_noalpha = {}

	self.elements_alpha[1] = xml:InitStatic		("tab_controls:cap_mousesens",			self)
	self.elements_alpha[2] = xml:InitStatic		("tab_controls:cap_mousesens_scope",	self)
	self.elements_alpha_color[1] = xml:InitFrameLine	("tab_controls:cap_keyboardsetup",		self)
	self.elements_alpha_color[2] = xml:InitFrameLine	("tab_controls:cap_keyboardsetup",		self)
	self.elements_noalpha[1] = xml:InitTrackBar	("tab_controls:track_mousesens",		self)
	self.elements_noalpha[2] = xml:InitTrackBar	("tab_controls:track_mousesens_scope",	self)
	self.elements_alpha[3] = xml:InitStatic		("tab_controls:cap_check_mouseinvert",	self)
	self.elements_noalpha[3] = xml:InitCheck		("tab_controls:check_mouseinvert",		self)
	self.elements_noalpha[4] = xml:InitKeyBinding	("tab_controls:key_binding",			self)

	local btn
	btn = xml:Init3tButton("tab_controls:btn_default", 			self)
	self.elements_noalpha[5] = btn
	handler:Register(btn, "btn_keyb_default")

end

function opt_controls:UpdateControlsTab()

	if (self.anim_alpha < 255 and not self.is_quit) or (self.anim_alpha > 0 and self.is_quit) then
		
		if (not self.is_quit) then
			self.anim_alpha = self.anim_alpha + 1
		else
			self.anim_alpha = self.anim_alpha - 1
		end
		
		for i=1, #self.elements_alpha do
			self.elements_alpha[i]:SetTextureColor(GetARGB(self.anim_alpha,255,255,255))
			self.elements_alpha[i]:TextControl():SetTextColor(GetARGB(self.anim_alpha,255,255,255))
		end
		
		for i=1, #self.elements_alpha_color do
			self.elements_alpha_color[i]:SetColor(GetARGB(self.anim_alpha,255,255,255))
		end
		
	end
	
	if (self.anim_alpha == 254) or (self.anim_alpha == 1 and self.is_quit) then
		for i=1, #self.elements_noalpha do
			self.elements_noalpha[i]:Show(not self.is_quit)
		end
	end

end

function opt_controls:SetAlphaToZero()

	self.anim_alpha = 0
	for i=1, #self.elements_noalpha do
		self.elements_noalpha[i]:Show(false)
	end

end

function opt_controls:SetIsQuit()
	self.is_quit = true
end

function opt_controls:UnsetIsQuit()
	self.is_quit = false
end