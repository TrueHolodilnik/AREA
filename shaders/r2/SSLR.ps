#include "common.h"
#include "gauss.h"
#include "ogse_reflections.h"
#include "shadow.h"

///////////////////////////////////////////////////////////////////
// pixel
float4 main(SQ IST):COLOR
{
	//float3 pos = getWpos(IST.tc0);
	//float3 norm = getWnorm(IST.tc0);
	//float3 eye = normalize(pos - eye_position);
	//half3 vreflect= reflect(eye, norm);
	//float3 env = calc_envmap(vreflect);
	//
	//
	//float fresnel = 0.0 + clamp(saturate(pow(1 - dot(-1 * eye, norm),1)), 0.0f, 1.0f);
	////float LD = 2.0f;
	//
	//float3 refl = normalize(reflect(eye,norm));
	//
	//float2 refl_tc = float2(0.f,0.f);
	//float L = SSLR_params.x;
	//float sample_depth = 0.f;
	//float depth = 0.f;
	//for (int i = 0; i < 8; i++)
	//{
	//	float3 Npos = pos.xyz + refl*L;
	//	
	//	//L = clamp(L, 0.0f, LD);
	//	
	//	float4 Npos_proj = mul(m_VP,float4(Npos,1.f));
	//	sample_depth = Npos_proj.z;
	//	Npos_proj.xyz /= Npos_proj.w;
	//	float2 sample_tc = float2(0.f,0.f);
	//	sample_tc.x = (Npos_proj.x + 1.f) * .5f;
	//	sample_tc.y = 1.f - ((Npos_proj.y + 1.f) * .5f);
	//	//sample_tc = get_6x6_image(sample_tc);
	//	
	//	float3 Hpos = getWpos(sample_tc);
	//	depth = Hpos.z;
	//	L = length(Hpos-pos);
	//	refl_tc = sample_tc;
	//}
	////float error = LD - L;
	//float error = abs(depth - sample_depth) < SSLR_params.y ? 1 : 0;
	////float3 test = tex2D(s_image,refl_tc);
	//float4 final = tex2D(s_image,refl_tc);
	//float4 final1 = final;
	//final.rgb = lerp(final, env, 1 - (1 - error)*(fresnel));
	////final *= fresnel;
	////if (final.r < env.r && final.g < env.g && final.b < env.b) final.rgb = lerp(env, final, final.rgb);
	//if (final1.r > 1- env.r || final1.g > 1- env.g || final1.b > 1- env.b) {
	//	final1.rgb = final1.rgb - final1.rgb/2 - final1.rgb/3;
	//	final.rgb = final1.rgb*final1.rgb*1.5;
	//}
	//final *= final;
	//final.rgb += L_sun_color/1.15;
	////if (final.r < 0.3 && final.g < 0.3 && final.b < 0.3) final.rgb = lerp(env, final, final.rgb);
	////if (final1.r > 0.6 || final1.g > 0.6 || final1.b > 0.6) {
	////	//final1.r = 1 - final1.r;
	////	//final1.g = 1 - final1.g;
	////	//final1.b = 1 - final1.b;
	////	final1.rgb = final1.rgb - final1.rgb/2;
	////	final.rgb = final1.rgb*final1.rgb*3;
	////}
	//final.a = 1;
	////pos.x = pos.x/30;
	////final += ripples(pos*2.0);
	//
	////final *= error;
	
	return float4(1,1,1,1);
}