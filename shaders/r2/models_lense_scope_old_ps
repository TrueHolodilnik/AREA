#include "common.h"

// Глобальные параметры шейдеров --#SM+#--

//uniform float4x4 m_script_params; //Не используется, зарезервировано на будущее.

//uniform	float4 m_hud_params; // zoom_rotate_factor, secondVP_zoom_factor, NULL, NULL

// KRodin: TODO: Вынести в common?
//uniform	float4 screen_res;

//uniform	float4 m_blender_mode; // x = [0 - default, 1 - night vision, 2 - thermal vision]; y = [0.0f / 1.0f - происходит ли в данный момент рендеринг картинки для прицела]; z = [0.0f / 1.0f - выключен или включён двойной рендер]; w - зарезервировано на будущее.

uniform sampler2D s_vp2;

//////////////////////////////////////////////////////////////////////////////////////////

struct v2p
{
 	float2 tc0: TEXCOORD0;	// base
 	half3 tc1: TEXCOORD1;	// environment
  	half4 c0: COLOR0;		// sun.(fog*fog)
};

float resize(float input, float factor, float offset)
{
	return (input - 0.5f + offset) / factor + 0.5f - offset;
}

float random(float2 co)
{
      return 0.5 + (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 0.5;
}

half4 main( v2p I )	: COLOR
{
	half4 t_base = tex2D(s_base, I.tc0); // Текстура сетки
	
	// Растягиваем картинку в линзе так, чтобы на любом разрешении экрана были правильные пропорции
	I.tc0.x = resize(I.tc0.x, screen_res.x / screen_res.y, 0);
	half4 t_vp2	= tex2D(s_vp2, I.tc0); // Изображение со второго вьюпорта
	
	if (!isSecondVPActive()) {
		t_vp2.rgb /= 100; //KRodin: чтобы изображение во втором вьюпорте не застывало после его отключения - просто затемним его в 100 раз.
	} else if (m_blender_mode.x == 1.f) { //Ночной режим
		// Рассчитываем случайный шум пикселя
		float noise = random(I.tc0 * timers.z) * 0.3;
		
		// Осветляем картинку в 7 раз
		t_vp2.rgb *= 7; //KRodin: TODO: уменьшить, т.к. слишком светло.
		
		// Обесцвечиваем пиксель
		float gray = ((t_vp2.r + t_vp2.g + t_vp2.b) / 3);
		t_vp2.rgb = half3(gray, gray, gray);
		
		// Добавляем зелёный оттенок
		t_vp2.g += (0.4 + noise);
	}
	
	// Миксуем с сеткой
	half3 final = lerp(t_vp2, t_base, t_base.a);
	
	// out
	return half4(final.r, final.g, final.b, m_hud_params.x);
}
