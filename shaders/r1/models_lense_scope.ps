#include "common.h"

struct 	v2p
{
 	half4 	tc0: 		TEXCOORD0;	// base
 	half4 	tc1: 		TEXCOORD1;	// environment
  	half4	c0:			COLOR0;		// sun.(fog*fog)
};

//////////////////////////////////////////////////////////////////////////////////////////

float  resize(float input, float factor, float offset)
{
	return (input-0.5f+offset) / factor+0.5f-offset;
}

// Pixel
uniform	float4		screen_res;

#include "pnv.h"

uniform sampler2D	s_vp2;

half4 	main_ps_2_0	( v2p I )	: COLOR
{
	half4	t_base = tex2D	(s_base, I.tc0);		// Mesh texture
	
	// Stretch the image in the lens so that the correct proportions are at any screen resolution
	I.tc0.x = resize(I.tc0.x, screen_res.x / screen_res.y, 0);
	half4	t_vp2 = tex2D	(s_vp2, I.tc0);			// Image from the second viewport
	
	if (!isSecondVPActive()) {
		t_vp2.rgb /= 100; //KRodin: so that the image in the second viewport does not freeze after turning it off, just darken it 100 times.
	} else if (m_blender_mode.x == 1.f) { //contrast NVD
		t_vp2.rgb = calc_night_vision_effect(I.tc0, t_vp2, float3(0.46, 0.46, 0.2), 2.0, false);
	} else if (m_blender_mode.x == 2.f) { //green_1 NVD
		t_vp2.rgb = calc_night_vision_effect(I.tc0, t_vp2, float3(0.66, 2.0, 0.5), 4.0, true);
	} else if (m_blender_mode.x == 3.f) { //green_2 NVD
		t_vp2.rgb = calc_night_vision_effect(I.tc0, t_vp2, float3(0.66, 2.0, 0.5), 7.0, true);
	} else if (m_blender_mode.x == 4.f) { //blue_1 NVD
		t_vp2.rgb = calc_night_vision_effect(I.tc0, t_vp2, float3(0.66, 0.5, 1.5), 4.0, true);
	} else if (m_blender_mode.x == 5.f) { //blue_2 NVD
		t_vp2.rgb = calc_night_vision_effect(I.tc0, t_vp2, float3(0.66, 0.5, 1.5), 7.0, true);
	} else if (m_blender_mode.x == 6.f) { //Fake thermal imager, in fact, NVD with a red tint
		t_vp2.rgb = calc_night_vision_effect(I.tc0, t_vp2, float3(0.79, 0.191, 0.247), 5.0, false);
	}
	
	// Mix with mesh
	half3 final = lerp(t_vp2, t_base, t_base.a);
	
	// out
	return  half4	(final.r, final.g, final.b, m_hud_params.x);
}
