#include "common.h"

#undef ULTRA_SHADOWS_ON
#undef USE_ULTRA_SHADOWS

#define RAY_PATH	2.0h
#define JITTER_TEXTURE_SIZE	64.0f

//#define	JITTER_SUN_SHAFTS

#define VOLUMETRIC_FOG_DENSITY 1.8

#ifdef	SUN_SHAFTS_QUALITY
	#if SUN_SHAFTS_QUALITY==1
		#define	FILTER_LOW
		#define RAY_SAMPLES	10
	#elif SUN_SHAFTS_QUALITY==2
		#define RAY_SAMPLES	20
	#elif SUN_SHAFTS_QUALITY==3
		#define RAY_SAMPLES	30
	#endif
#endif

#ifndef	FILTER_LOW
#ifdef USE_MINMAX_SM
#define SM_MINMAX
#endif
#endif

#include "shadow.h"

float4	volume_range;	//	x - near plane, y - far plane
float4	sun_shafts_intensity;


float getMiePhase(float fCos, float fCos2)
{
	return 1.5 * (1.0 + fCos2) / pow(2.0 - 1.0 * fCos, 1.5);
}


#ifdef MSAA_OPTIMIZATION
//#ifdef GBUFFER_OPTIMIZATION
//float4 	main (float2 tc : TEXCOORD0, float2 tcJ : TEXCOORD1, float4 pos2d : SV_Position, uint iSample : SV_SAMPLEINDEX ) : SV_Target
//#else
float4 	main (v2p_volume  I, uint iSample : SV_SAMPLEINDEX  ) : SV_Target
//#endif
#else
//#ifdef GBUFFER_OPTIMIZATION
//float4 	main (float2 tc : TEXCOORD0, float2 tcJ : TEXCOORD1, float4 pos2d : SV_Position ) : SV_Target
//#else
float4 	main (v2p_volume  I) : SV_Target
//#endif
#endif
{
#ifndef SUN_SHAFTS_QUALITY
	return 0.0;
#else // SUN_SHAFTS_QUALITY

	float2	tc  = I.tc.xy/I.tc.w;
	float4	pos2d = I.hpos;
	
	gbuffer_data gbd = gbuffer_load_data( GLD_P(tc, pos2d, ISAMPLE) );

	//float3	P = tex2D(s_position, tc).xyz;
	float3	P = gbd.P;

#ifndef	JITTER_SUN_SHAFTS
//	Fixed ray length, fixed step dencity
//	float3	direction = (RAY_PATH/RAY_SAMPLES)*normalize(P);	
//	Variable ray length, variable step dencity
	float3	direction = P/RAY_SAMPLES;
#else	//	JITTER_SUN_SHAFTS
//	float2	tcJ = I.tcJ;
//	Variable ray length, variable step dencity, use jittering
	//float4	J0 	= tex2D		(jitter0,tcJ);
	float4	J0 	= jitter0.Sample( smp_jitter, tc*screen_res.x*1.f/JITTER_TEXTURE_SIZE );
	float	coeff = (RAY_SAMPLES - 2*J0.x)/(RAY_SAMPLES*RAY_SAMPLES);		
	float3	direction = P*coeff;
//	float3	direction = P/(RAY_SAMPLES+(J0.x*4-2));
#endif	//	JITTER_SUN_SHAFTS

	float	depth = P.z;
	float	deltaDepth = direction.z;
	
	float4	current	= mul (m_shadow,float4(P,1));
	float4	delta 	= mul (m_shadow, float4(direction,0));

	float	res = 0;
	float	max_density = 0.25;
	float	density = max_density/RAY_SAMPLES;

	if (depth<0.0001)
		res = max_density;


	[unroll(RAY_SAMPLES)] for (int i = 0; i < RAY_SAMPLES; ++i)
	{
		if (depth > 0.3)
		{
#ifndef	FILTER_LOW
#ifndef SM_MINMAX
				res += density*shadow( current );
#else
				res += density*shadow_dx10_1_sunshafts(current, pos2d.xy );
#endif
#else	//	FILTER_LOW
				res += density*sample_hw_pcf(current, float4(0,0,0,0));
#endif	//	FILTER_LOW
		}

		depth -= deltaDepth;
		current -= delta;
	}

	float4 FinalColor = Ldynamic_color;

	//Credits to Dark Path
	float distance = length(P);
	//static const float fogDensity = 0.01 * VOLUMETRIC_FOG_DENSITY;
	//res *= saturate(pow((1.0 - exp(-distance * fogDensity)), 2));

	float fCos = dot(-Ldynamic_dir.xyz, P) / distance;
	float fCos2 = fCos * fCos;
	float fPhase = getMiePhase(fCos, fCos2);

	if (distance < EPSDEPTH)
		return max_density * FinalColor;

	return res * FinalColor * saturate(fPhase);

#endif //	SUN_SHAFTS_QUALITY
}
