#if ( defined(MSAA_ALPHATEST_DX10_1_ATOC) || defined(MSAA_ALPHATEST_DX10_1) ) 
#define EXTEND_F_DEFFER
#endif


#include "common.h"
#include "sload.h"

#ifdef	ATOC

float4 	main	( p_bumped I ) : SV_Target
{
	surface_bumped 	S 		= sload 	(I);
	S.base.w = (S.base.w-def_aref*0.5f)/(1-def_aref*0.5f);
	return S.base;
}

#else	//	ATOC

#ifdef	MSAA_ALPHATEST_DX10_1_ATOC
f_deffer 	main	( p_bumped I, float4 pos2d : SV_Position )
#else	//	MSAA_ALPHATEST_DX10_1_ATOC
f_deffer 	main	( p_bumped I, float4 pos2d : SV_Position  )
#endif	//	MSAA_ALPHATEST_DX10_1_ATOC
{
	f_deffer		O;


#if !defined(MSAA_ALPHATEST_DX10_1)
	surface_bumped 	S 		= sload 	(I);

#if	!( defined(MSAA_ALPHATEST_DX10_1_ATOC) || defined(MSAA_ALPHATEST_DX10_0_ATOC) )
	//float noise = alphatesting(pos2d.xy);
	clip(S.base.w-(def_aref));
#endif	//	!( defined(MSAA_ALPHATEST_DX10_1_ATOC) || defined(MSAA_ALPHATEST_DX10_1_ATOC) )
#ifdef 	MSAA_ALPHATEST_DX10_1_ATOC
	float alpha = (S.base.w-def_aref*0.5f)/(1-def_aref*0.5f);
	uint mask = calc_atoc_level ( alpha, pos2d );
#endif	//	MSAA_ALPHATEST_DX10_1_ATOC

#else	//	!defined(MSAA_ALPHATEST_DX10_1)
	uint mask = 0x0;
	
	surface_bumped 	S 		= sload 	(I,MSAAOffsets[0]*(1.0/16.0));
	
	if( S.base.w-def_aref >= 0 ) mask |= 0x1;
	
	[unroll] for( int i = 1; i < MSAA_SAMPLES; ++i )
	{
		surface_bumped 	SI 		= sload 	(I,MSAAOffsets[i]*(1.0/16.0));
		if( SI.base.w-def_aref >= 0 ) mask |= ( uint(0x1) << i );
	}
	
	if( mask == 0x0 )
		discard;
#endif	//	!defined(MSAA_ALPHATEST_DX10_1)

	// Sample normal, rotate it by matrix, encode position 
  	float3	Ne  = mul		(float3x3(I.M1, I.M2, I.M3), S.normal);
			Ne	= normalize	(Ne);

	// hemi,sun,material
	float 	ms	= xmaterial		;

	//For foliage SSS
	//ms = MAT_FLORA;
	ms = 0.5;
	
	//S.gloss = saturate(S.base.g-(S.base.r*0.85)); //green = fresh grass / red = dead grass / make red rougher
	//S.gloss = 0.25*saturate((1.5*S.base.g*S.base.g)-(S.base.r*0.25));//green = fresh grass / red = dead grass / make red rougher
	//S.gloss = 0; //no spec


#ifdef USE_LM_HEMI
//	float4	lm 	= tex2D			(s_hemi, I.lmh);
	float4	lm 	= s_hemi.Sample( smp_rtlinear, I.lmh);
	//float 	h  	= dot			(lm.rgb,1.h/3.h);
	float 	h  	= get_hemi(lm);
# ifdef USE_R2_STATIC_SUN
//		 	ms 	= lm.w;
			ms 	= get_sun(lm);
# endif
#else
	float 	h	= I.position.w	;
# ifdef USE_R2_STATIC_SUN
		 	ms	= I.tcdh.w		;
# endif
#endif

	//float factor = smoothstep( 0.02, 0.05, dot(float3(0,1,0), Ne));  //Winter
	float sbr = (S.base.x + S.base.y + S.base.z)/3; //Winter
	//if (S.base.g > 0.2) S.base.rgb = float3(sbr, sbr, sbr);
	S.base.rgb = float3(0.4, 0.4, 0.4)*(sbr + 0.4)*4;

#ifndef EXTEND_F_DEFFER
	O = pack_gbuffer(
	float4(Ne, h),
	float4(I.position.xyz, ms),
	float4(S.base.xyz, S.gloss)//,
	//float4(0,0,0,0)
	);
#else
	O = pack_gbuffer(
	float4(Ne, h),
	float4(I.position.xyz, ms),
	float4(S.base.xyz, S.gloss),
	//float4(0,0,0,0),
	mask );
#endif

	return 	O	;
}

#endif //	ATOC
