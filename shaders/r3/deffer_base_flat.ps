#include "common.h"
#include "sload.h"
#include "infrared.h"

uniform float3x4	m_v2w;
TextureCube		sky_s0;
TextureCube		sky_s1;

f_deffer main( p_flat I )
{
  f_deffer	O;

  // diffuse
  float3 D	= tbase		(I.tcdh);	// IN:  rgb.a

#ifdef	USE_TDETAIL
//	D.rgb	= 2*D.rgb*tex2D	(s_detail, I.tcdbump).rgb;
	D.rgb	= 2*D.rgb * s_detail.Sample( smp_base, I.tcdbump ).rgb;
#endif

	// hemi,sun,material
	float 	ms	= xmaterial		;
#ifdef USE_LM_HEMI
//	float4	lm 	= tex2D( s_hemi, I.lmh );
	float4	lm 	= s_hemi.Sample( smp_rtlinear, I.lmh );
//	float 	h  	= dot( lm.rgb, 1.h/3.h );
	float 	h  	= get_hemi(lm);
# ifdef USE_R2_STATIC_SUN
//		 	ms 	= lm.w			;
			ms 	= get_sun(lm);
# endif
#else
	float 	h	= I.position.w	;
# ifdef USE_R2_STATIC_SUN
		 	ms	= I.tcdh.w		;
# endif
#endif

	float objMat = mcls(ms);
	float tbr = (D.r + D.g + D.b)/3; //Winter
	if ((objMat == 3 || objMat == 2) && (D.g > 0.2)) {
		D.rgb = float3(tbr, tbr, tbr); //Winter
	}


  // 2. Standart output
  float4 Ne		= float4( normalize((float3)I.N.xyz), h*H_MODELS );
  
  
	//if (D.a > 0) {
	//
	//	float3 wnorm = normalize(mul(m_v2w, float4(Ne.xyz, 0)));
	//	float3 wposi = mul(m_v2w, float4(I.position.xyz, 1));
	//	float3 to_point  = normalize(wposi - eye_position);
	//	float3 sky = sky_true_reflection(sky_s0, sky_s1, float4(normalize(reflect(to_point, wnorm)), clamp((eye_position.y - wposi.y) * 0.45, 1.5, 3.5)));
	//	
	//	D.rgb += sky*D.a;
	//
	//}
  
  
  O				= pack_gbuffer(
								Ne,
								float4( I.position.xyz + Ne.xyz*def_virtualh/2.h, ms ),
								float4( D.rgb, def_gloss ) );	// OUT: rgb.gloss

  return O;
}
